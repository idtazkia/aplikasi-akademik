package id.ac.tazkia.smilemahasiswa.dao;

import id.ac.tazkia.smilemahasiswa.dto.schedule.JadwalPloting;
import id.ac.tazkia.smilemahasiswa.dto.schedule.ListPlotingDto;
import id.ac.tazkia.smilemahasiswa.entity.*;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.List;

public interface MatakuliahKurikulumDao extends PagingAndSortingRepository<MatakuliahKurikulum, String> {
    List<MatakuliahKurikulum> findByStatusNotInAndKurikulumAndKurikulumProdiAndSemester(List<StatusRecord> asList, Kurikulum kurikulum, Prodi prodi, int i);
    List<MatakuliahKurikulum> findByStatusNotInAndKurikulumAndKurikulumProdi(List<StatusRecord> asList, Kurikulum kurikulum, Prodi prodi);

    List<MatakuliahKurikulum> findByStatusAndKurikulumAndSemesterNotNull(StatusRecord aktif, Kurikulum kurikulum);

    @Query(value = "SELECT a.nama_kelas,b.id AS id_mkkur,c.kode_matakuliah,c.nama_matakuliah,c.nama_matakuliah_english,a.id FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas WHERE a.status='AKTIF' and b.status = 'AKTIF' and a.id_prodi=?1 AND a.angkatan=?2 AND semester=?3 ORDER BY nama_kelas,b.id", nativeQuery = true)
    List<Object[]> plotingDosen(Prodi prodi, String kelas, Integer semester);

    @Query(value = "select a.id_matakuliah_kurikulum as matkur, a.id_matakuliah as matkul, a.semester, a.kode_matakuliah as kode, a.nama_matakuliah as nama, group_concat(a.id_matakuliah_setara) as matakuliah_setara, group_concat(a.id_matakuliah_pras) as matakuliah_pras, group_concat(d.id_matakuliah)as prasyarat_sudah_diambil, group_concat(b.id_matakuliah) as matkul_sudah_diambil,max(b.nilai_akhir) as nilai, min(b.grade) as grade, max(b.bobot) as bobot from (select a.*,b.id_matakuliah_setara, c.id_matakuliah_pras, c.kode_matakuliah as kode_matakuliah_pras, c.nama_matakuliah as nama_matakuliah_pras,c.nama_matakuliah_english as nama_matakuliah_pras_english, c.nilai as nilai_pras from (select a.id as id_matakuliah_kurikulum, e.id as id_matakuliah, a.semester, a.jumlah_sks ,e.* from matakuliah_kurikulum as a inner join mahasiswa as d on a.id_kurikulum = d.id_kurikulum inner join matakuliah as e on a.id_matakuliah = e.id where a.status = 'AKTIF' and d.status = 'AKTIF' and d.id = ?1 order by a.semester, e.nama_matakuliah)a left join matakuliah_setara as b on a.id_matakuliah = b.id_matakuliah left join (select a.*, d.kode_matakuliah, d.nama_matakuliah, d.nama_matakuliah_english from prasyarat as a inner join matakuliah as d on a.id_matakuliah_pras = d.id) as c on a.id_matakuliah = c.id_matakuliah or b.id_matakuliah_setara = c.id_matakuliah)a left join matakuliah_setara as u on a.id_matakuliah_pras = u.id_matakuliah left join (select a.*,d.id_matakuliah,e.kode_matakuliah, e.nama_matakuliah, e.nama_matakuliah_english,c.id_matakuliah_kurikulum as mkk from krs_detail as a inner join krs as b on a.id_krs = b.id inner join jadwal as c on a.id_jadwal = c.id inner join matakuliah_kurikulum as d on c.id_matakuliah_kurikulum = d.id inner join matakuliah as e on d.id_matakuliah = e.id where a.id_mahasiswa = ?1 and a.status = 'AKTIF' and b.status = 'AKTIF' and c.status = 'AKTIF' and d.status = 'AKTIF' group by a.id) b on a.id_matakuliah = b.id_matakuliah or a.id_matakuliah_setara = b.id_matakuliah or a.kode_matakuliah = b.kode_matakuliah or a.nama_matakuliah = b.nama_matakuliah or a.nama_matakuliah_english = b.nama_matakuliah_english  or a.id_matakuliah_kurikulum = b.mkk left join (select a.*,d.id_matakuliah,e.kode_matakuliah, e.nama_matakuliah, e.nama_matakuliah_english,c.id_matakuliah_kurikulum as mkk from krs_detail as a inner join krs as b on a.id_krs = b.id inner join jadwal as c on a.id_jadwal = c.id inner join matakuliah_kurikulum as d on c.id_matakuliah_kurikulum = d.id inner join matakuliah as e on d.id_matakuliah = e.id where a.id_mahasiswa = ?1 and a.status = 'AKTIF' and b.status = 'AKTIF' and c.status = 'AKTIF' and d.status = 'AKTIF' group by a.id) d on (d.id_matakuliah = a.id_matakuliah_pras or d.kode_matakuliah = a.kode_matakuliah_pras or d.nama_matakuliah = a.nama_matakuliah_pras or d.nama_matakuliah_english = a.nama_matakuliah_pras_english or d.id_matakuliah = u.id_matakuliah_setara) and d.bobot >= a.nilai_pras group by a.id_matakuliah_kurikulum order by a.semester", nativeQuery = true)
    List<Object[]> listMatkulSelection(Mahasiswa mahasiswa);

    @Query(value = "select a.id_matakuliah_kurikulum as matkur, a.id_matakuliah as matkul, a.semester, a.kode_matakuliah as kode, a.nama_matakuliah as nama, group_concat(a.id_matakuliah_setara) as matakuliah_setara, group_concat(a.id_matakuliah_pras) as matakuliah_pras, group_concat(d.id_matakuliah)as prasyarat_sudah_diambil, group_concat(b.id_matakuliah) as matkul_sudah_diambil,max(b.nilai_akhir) as nilai, min(b.grade) as grade, max(b.bobot) as bobot from (select a.*,b.id_matakuliah_setara, c.id_matakuliah_pras, c.kode_matakuliah as kode_matakuliah_pras, c.nama_matakuliah as nama_matakuliah_pras,c.nama_matakuliah_english as nama_matakuliah_pras_english, c.nilai as nilai_pras from (select a.id as id_matakuliah_kurikulum, e.id as id_matakuliah, a.semester, a.jumlah_sks ,e.* from matakuliah as e inner join matakuliah_kurikulum as a on e.id = a.id_matakuliah where a.status = 'AKTIF' and a.id_kurikulum in ((?2)) order by a.semester, e.nama_matakuliah)a left join matakuliah_setara as b on a.id_matakuliah = b.id_matakuliah left join (select a.*, d.kode_matakuliah, d.nama_matakuliah, d.nama_matakuliah_english from prasyarat as a inner join matakuliah as d on a.id_matakuliah_pras = d.id) as c on a.id_matakuliah = c.id_matakuliah or b.id_matakuliah_setara = c.id_matakuliah)a left join matakuliah_setara as u on a.id_matakuliah_pras = u.id_matakuliah left join (select a.*,d.id_matakuliah,e.kode_matakuliah, e.nama_matakuliah, e.nama_matakuliah_english,c.id_matakuliah_kurikulum as mkk from krs_detail as a inner join krs as b on a.id_krs = b.id inner join jadwal as c on a.id_jadwal = c.id inner join matakuliah_kurikulum as d on c.id_matakuliah_kurikulum = d.id inner join matakuliah as e on d.id_matakuliah = e.id where a.id_mahasiswa = ?1 and a.status = 'AKTIF' and b.status = 'AKTIF' and c.status = 'AKTIF' and d.status = 'AKTIF' group by a.id) b on a.id_matakuliah = b.id_matakuliah or a.id_matakuliah_setara = b.id_matakuliah or a.kode_matakuliah = b.kode_matakuliah or a.nama_matakuliah = b.nama_matakuliah or a.nama_matakuliah_english = b.nama_matakuliah_english  or a.id_matakuliah_kurikulum = b.mkk left join (select a.*,d.id_matakuliah,e.kode_matakuliah, e.nama_matakuliah, e.nama_matakuliah_english,c.id_matakuliah_kurikulum as mkk from krs_detail as a inner join krs as b on a.id_krs = b.id inner join jadwal as c on a.id_jadwal = c.id inner join matakuliah_kurikulum as d on c.id_matakuliah_kurikulum = d.id inner join matakuliah as e on d.id_matakuliah = e.id where a.id_mahasiswa = ?1 and a.status = 'AKTIF' and b.status = 'AKTIF' and c.status = 'AKTIF' and d.status = 'AKTIF' group by a.id) d on (d.id_matakuliah = a.id_matakuliah_pras or d.kode_matakuliah = a.kode_matakuliah_pras or d.nama_matakuliah = a.nama_matakuliah_pras or d.nama_matakuliah_english = a.nama_matakuliah_pras_english or d.id_matakuliah = u.id_matakuliah_setara) and d.bobot >= a.nilai_pras group by a.id_matakuliah_kurikulum order by a.semester", nativeQuery = true)
    List<Object[]> listMatkulSelectionProdi(Mahasiswa mahasiswa);

    @Query(value = "SELECT idJad as jadwal,hari,mulai, a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as course,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar as dosen,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad , j.jam_mulai as mulai,j.id_hari as hari,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and b.semester in ('1','3','5','7','9') and a.id in(?2) and b.status = 'AKTIF'", nativeQuery = true)
    List<ListPlotingDto> plotingDosenGanjil(TahunAkademik tahunAkademik,List<String> kelas);

    @Query(value = "SELECT idJad as jadwal,hari,mulai, a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as course,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar as dosen,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad ,j.jam_mulai as mulai,j.id_hari as hari,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and b.semester in ('2','4','6','8') and a.id in(?2) and b.status = 'AKTIF'", nativeQuery = true)
    List<ListPlotingDto> plotingDosenGenap(TahunAkademik tahunAkademik,List<String> kelas);

    @Query(value = "SELECT idJad as jadwal,hari,mulai, a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as course,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar as dosen,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad , j.jam_mulai as mulai,j.id_hari as hari,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and b.semester in ('1','3','5','7','9') and a.id in(?2) and b.status = 'AKTIF' and idDos is not null", nativeQuery = true)
    List<ListPlotingDto> addPlotingDosenGanjil(TahunAkademik tahunAkademik,List<String> kelas);

    @Query(value = "SELECT idJad as jadwal,hari,mulai, a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as course,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar as dosen,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad ,j.jam_mulai as mulai,j.id_hari as hari,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and b.semester in ('2','4','6','8') and a.id in(?2) and b.status = 'AKTIF' and idDos is not null", nativeQuery = true)
    List<ListPlotingDto> addPlotingDosenGenap(TahunAkademik tahunAkademik,List<String> kelas);

    @Query(value = "select j.id as jadwal,k.id as idKelas,k.nama_kelas as kelas,mk.id as mkkur,m.nama_matakuliah as matkul,m.nama_matakuliah_english as course,mk.jumlah_sks as sks,d.id as idDos, ka.nama_karyawan as dosen,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks, '<select id=\"dosenList\" style=\"width: 100%!important;\" name=\"dosen\" class=\"js-example-basic-multiple js-states form-control js-data-example-ajax\"></select>' as html from jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join kelas as k on j.id_kelas = k.id inner join dosen as d on j.id_dosen_pengampu = d.id inner join karyawan as ka on d.id_karyawan = ka.id where j.id_tahun_akademik = ?1 and j.status = 'AKTIF' and j.id_hari is null and j.jam_mulai is null order by k.nama_kelas", nativeQuery = true)
    List<JadwalPloting> jadwalPloting(TahunAkademik akademik);

    @Query(value = "SELECT a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as english,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad ,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and b.status = 'AKTIF' and a.angkatan=?2 and c.nama_matakuliah like %?3% AND idDos is null or a.status='AKTIF' and b.status = 'AKTIF' and a.nama_kelas like %?3% and a.angkatan=?2 and idDos is null ORDER BY nama_kelas,b.id", nativeQuery = true)
    List<ListPlotingDto> searchPloting(TahunAkademik akademik, String angkatan, String search);

    @Query(value = "SELECT a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as english,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad ,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and a.id in (?2) and b.status = 'AKTIF'  and c.nama_matakuliah like %?3% and b.semester in ('2','4','6','8') AND idDos is null or a.status='AKTIF' and a.id in (?2) and b.semester in ('2','4','6','8') and b.status = 'AKTIF' and a.nama_kelas like %?3% and idDos is null ORDER BY nama_kelas,b.id;", nativeQuery = true)
    List<ListPlotingDto> searchPlotingGenap(TahunAkademik tahunAkademik,List<String> kelas,String search);

    @Query(value = "SELECT a.id as idKelas,a.nama_kelas as kelas,b.id AS mkkur,c.kode_matakuliah as kode,c.nama_matakuliah as matkul,c.nama_matakuliah_english as english,b.jumlah_sks as sks,CONCAT(a.nama_kelas,'-',c.kode_matakuliah) as validasi, idDos,namkar,(SELECT sum(mk.jumlah_sks) FROM jadwal as j inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id where id_tahun_akademik = ?1 and id_dosen_pengampu = idDos and j.status = 'AKTIF') as totsks FROM kelas AS a INNER JOIN matakuliah_kurikulum AS b ON a.id_kurikulum = b.id_kurikulum INNER JOIN matakuliah AS c ON b.id_matakuliah=c.id LEFT JOIN (SELECT aa.*,bb.id_kelas FROM mahasiswa AS aa INNER JOIN kelas_mahasiswa AS bb ON aa.id=bb.id_mahasiswa WHERE aa.status='AKTIF' AND bb.status='AKTIF' GROUP BY bb.id_kelas) d ON a.id = d.id_kelas left join (select j.id as idJad ,j.id_dosen_pengampu as idDos,kar.nama_karyawan as namkar,k.nama_kelas as knama,m.kode_matakuliah as mkode from jadwal as j inner join kelas as k on j.id_kelas = k.id inner join matakuliah_kurikulum as mk on j.id_matakuliah_kurikulum = mk.id inner join matakuliah as m on mk.id_matakuliah = m.id inner join dosen as dos on j.id_dosen_pengampu= dos.id inner join karyawan as kar on dos.id_karyawan = kar.id where j.status = 'AKTIF' and j.id_tahun_akademik = ?1) jk on CONCAT(a.nama_kelas,'-',c.kode_matakuliah) = CONCAT(jk.knama,'-',jk.mkode) WHERE a.status='AKTIF' and a.id in (?2) and b.status = 'AKTIF'  and c.nama_matakuliah like %?3% and b.semester in ('1','3','5','7') AND idDos is null or a.status='AKTIF' and a.id in (?2) and b.semester in ('1','3','5','7') and b.status = 'AKTIF' and a.nama_kelas like %?3% and idDos is null ORDER BY nama_kelas,b.id;", nativeQuery = true)
    List<ListPlotingDto> searchPlotingGanjil(TahunAkademik tahunAkademik,List<String> kelas,String search);

    List<MatakuliahKurikulum> findByStatusAndMatakuliahIdIn(StatusRecord status, List<String> id);

}
